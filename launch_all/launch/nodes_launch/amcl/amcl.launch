<launch>
    <arg name="rviz" default="False"/>
    <arg name="config" default="$(find launch_all)/config/global_amcl_params.yaml"
         doc="Specify a config"/>

    <arg name="output" default="screen" doc="Output display"/>
    <arg name="param_file_name" default="default" doc="Specify a param file"/>
    <arg name="req" default="True"/>

    <arg name="pkg_name" value="amcl" doc="name of the package"/>
    <arg name="node_name" default="amcl" doc="name of the node"/>
    <arg name="node_type" default="amcl_node" doc="name of the type"/>

    <node pkg="$(arg pkg_name)" type="$(arg node_type)" name="$(arg node_name)"
          output="$(arg output)" required="$(arg req)">
        <rosparam command="load" file="$(arg config)" ns="amcl" />
    </node>
    <node name="pointcloud_to_laserscan_node" pkg="launch_all" type="pointcloud_to_laserscan_node.py" respawn="false" output="screen"/>
    <!-- launch dummy static vehicle transform w.r.t. world frame -->
    <!-- node pkg="tf2_ros" type="static_transform_publisher"
          name="vehicle_broadcaster"
          args="1 1 0 0 0 0 1 map base_link"/ -->

    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="/carla/ego_vehicle/lidar/lidar1/point_cloud"/>
        <rosparam>
            target_frame: <ego_vehicle/lidar/lidar1> 
            transform_tolerance: 0.01
            min_height: 0.0
            max_height: 1.0

            angle_min: -3.14 # -M_PI
            angle_max: 3.14 # M_PI
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 10.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 0
        </rosparam>
    </node>
</launch>